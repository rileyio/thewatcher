<!doctype html>
<html>

<head>
  <title>TheWatcher - Server (By: TheDoxMedia)</title>
  <style>
    body {
      font-family: monospace;
    }
    
    input {
      border: 1px solid dimgray;
    }
    
    .success-text {
      color: rgba(39, 174, 96, 1.0);
    }
    
    .fail-text {
      color: rgba(192, 57, 43, 1.0);
    }
    
    .client-sep {
      color: rgba(41, 128, 185, 1.0);
    }
    
    .client-value {
      color: rgba(142, 68, 173, 1.0);
    }
  </style>
</head>

<body>
  <div>
    <div id="login">
      Supply
      <%= svrUserName %>'s PGP private key to login
        <br/>
        <br/>
        <input type="file" id="login-input-key" />

        <br/>
        <br/>
        <div id="login-debug">
          <span id="login-debug-0">PGP Key loaded</span>
          <br/>
          <span id="login-debug-1">WSS Connected</span>
          <br/>
          <span id="login-debug-2">Authenticated</span>
          <br/>
        </div>
    </div>

    <br/>
    <br/>

    <div id="monitor" style="display: none;">
      Admins Connected: <span id="admins-connected">n/a</div>
      Clients Connected: <span id="clients-connected">n/a</div>

      <br/>
      Clients Stats:
      <div id="clients">
        <div id="admins">
          <div v-for="admin in admins">
            <b>ADMIN<span class="admin-sep">::</span><span class="admin-value">{{ admin.name }}</span></b> &nbsp;&nbsp;&nbsp;
      <b>SocketID<span class="admin-sep">::</span><span class="admin-value">{{ admin.socket_id }}</span></b> &nbsp;&nbsp;&nbsp;
    </div>
  </div>

  <div v-for="client in clients">
    <b>Name<span class="client-sep">::</span><span class="client-value">{{ client.name }}</span></b> &nbsp;&nbsp;&nbsp; Uptime::{{
    client.data.uptime }} Mem::
    <span class="client-value">{{ client.data.memory.free }}/{{ client.data.memory.total }}</span>
  </div>
  </div>
  </div>
  </div>

  <script src="//cdn.socket.io/socket.io-1.2.0.js"></script>
  <script src="//code.jquery.com/jquery-1.11.1.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/vue/1.0.13/vue.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/openpgp/2.1.0/openpgp.min.js"></script>
  <script>
    // PGP Key Data
    var pgpKeyData = {};
    var selfURL = window.location.host;
    var liveData; // Populated when connected
    var interval;

    // Login JS
    $('#login-input-key').change(function(){
      var file = $(this)[0].files[0];
      var reader = new FileReader();
      
      // Read file
      reader.readAsText(file);
      
      // When done
      reader.onload = function(e){
        pgpKeyData.private = e.target.result;
        
        checklist('login-debug-0', true);
        
        // Call connect function
        connect();
      }
    });
    
    function connect (){
      var socket = io.connect('wss://' + selfURL, {
        'secure': true,
        'forceNew': true
      })

      socket.on('connect', function () {
        checklist('login-debug-1', true);        
        
        var prepMsg = JSON.stringify({
          socket_id: socket.id,
          name: '<%= svrUserName %>'
        });
        
        pgpSign(pgpKeyData.private, prepMsg, function(signed){
          // Emit over wss to authenticate
          socket.emit('authentication', {
            name: '<%= svrUserName %>',
            signed: signed
          });
        });
      });
      
      socket.on('authenticated', function () {
        checklist('login-debug-2', true);        
        console.log('Socket Connected!');
        
        // Monitor();
        $('#monitor').show();
      });
      
      socket.on('unauthorized', function (err) {
        checklist('login-debug-2', false);
        
        console.log("There was an error with the authentication:", err.message);
      });
      
      socket.on('reconnecting', function (attempt) {
        console.log('Reconnecting', attempt);
      });
      
      // Clients stats list template
      var clientsVue = new Vue({
        el: '#clients',
        data: {
          admins: [
            {
              name: null,
              socket_id: null
            }
          ],
          clients: [
            {
                name: null,
                socket_id: null,
                data: null
            }
          ]
        },
        // methods: {
        //   byteToMB: function (value){
        //     return (value / 1024 / 1024)
        //   }
        // },
        ready: function (){
          var self = this;          
          
          socket.on('server-stats', function (data) {
            // Total number of connected clients
            $('#admins-connected').text(data.adminsData.length);
            $('#clients-connected').text(data.hbData.length);

            // Parse/Recalc some vales
            // var socketData = data.hbData;
            // [Parse] Memory from bytes to MB
            // socketData.

            self.clients = data.hbData;
            self.admins = data.adminsData;
          });
        }      
      })
      
      socket.on('disconnect', function(data){
        checklist('login-debug-1', false);
        checklist('login-debug-2', false);
        
        // console.log(data);
        $('#clients-connected').text('Disconnected');
    
        // clearInterval(interval);
      });
  
      socket.on('error', function(err){
          console.log(err);
          $('#clients-connected').text(err);
      });
    }
    
    // PGP Signer
    function pgpSign(key, message, callback){
      var readKey = openpgp.key.readArmored(key);

      openpgp.sign({
        data: message.toString(),
        privateKeys: readKey.keys[0]
      })
        .then(callback);
    }

    // Checklist update (debugging list)
    function checklist(id, success){
      var newColor = (success === true) ? 'success-text' : 'fail-text';
      var newMark = (success === true) ? '<span class="status">&#10004;</span> ' : '<span class="status">&#10008;</span> ';
      
      // Remove any current status indicators & colors
      $('.status', '#' + id).remove();
      $('#' + id).removeClass('success-text fail-text');
      
      // Update debug line
      $('#' + id) .addClass(newColor).prepend(newMark);
    }
  </script>
</body>

</html>